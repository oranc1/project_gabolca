<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.itwillbs.project_gabolcar.mapper.CarItemMapper">

<!-- 리뷰 관련 mapper.xml -->
	<!-- 리뷰 게시판 목록 !-->

	<!-- 리뷰게시판 작은거 3개 -->
	<select id="getReviewListSmall" resultType="map" parameterType="com.itwillbs.project_gabolcar.vo.ReviewVO">
	select * from rev_car rc 
		where res_idx IN(
			select res_idx from res_info ri
				where car_idx in ( 
			select car_idx from car_info ci
				where car_model= #{car_model}
				)
			)
			ORDER BY rev_star DESC
			LIMIT 3
	</select>

	
	<!-- 리뷰게시판 목록 페이지 나누기 -->
	<select id="getReviewListPaging" resultType="com.itwillbs.project_gabolcar.vo.ReviewVO">
		SELECT * FROM (
	           	SELECT rc.rev_date, rc.rev_content, rc.rev_name, mi.mem_id, rc.rev_idx, rc.rev_star, rc.rev_subject, ci.car_model, 
	            date_format(rev_date, '%Y-%m-%d')AS rev_date_format 
	              FROM rev_car rc
	              	JOIN res_info ri
	              	ON rc.res_idx = ri.res_idx 
	              	JOIN car_info ci
	              	ON ri.car_idx = ci.car_idx 
	              	left join mem_info mi
	              	on rc.rev_name = mi.mem_name
              		) AS n1
						  <if test="!searchKeyword.equals('')">
							WHERE
							<choose>
								<when test="searchType.equals('subject')">
									rev_subject LIKE '%${searchKeyword}%'
								</when>
								<when test="searchType.equals('content')">
									rev_content LIKE '%${searchKeyword}%'
								</when>
								<when test="searchType.equals('subject_content')">
									rev_subject LIKE '%${searchKeyword}%'
									OR rev_content LIKE '%${searchKeyword}%'
								</when>
								<when test="searchType.equals('name')">
									rev_name LIKE '%${searchKeyword}%'
								</when>
								<when test="searchType.equals('star')">
									rev_star LIKE '%${searchKeyword}%'
								</when>
								<when test="searchType.equals('carModel')">
									car_model LIKE '%${searchKeyword}%'
								</when>
							</choose>
						</if>
					ORDER BY rev_idx DESC
	    			LIMIT 	#{startRow}, #{listLimit}
	</select>
	
	<!-- 리뷰 게시판 총 갯수 -->
	<select id="getTotal" resultType="int">
			SELECT COUNT(*) FROM (
	           	SELECT rc.rev_date, rc.rev_content, rc.rev_name, rc.rev_idx, rc.rev_star, rc.rev_subject, ci.car_model, 
	            date_format(rev_date, '%Y-%m-%d')AS rev_date_format 
	              FROM rev_car rc
	              	JOIN res_info ri
	              	ON rc.res_idx = ri.res_idx 
	              	JOIN car_info ci
	              	ON ri.car_idx = ci.car_idx 
              		) AS n1
				<if test="!searchKeyword.equals('')">
					WHERE
					<choose>
						<when test="searchType.equals('subject')">
							rev_subject LIKE '%${searchKeyword}%'
						</when>
						<when test="searchType.equals('content')">
							rev_content LIKE '%${searchKeyword}%'
						</when>
						<when test="searchType.equals('subject_content')">
							rev_subject LIKE '%${searchKeyword}%'
							OR rev_content LIKE '%${searchKeyword}%'
						</when>
						<when test="searchType.equals('name')">
							rev_name LIKE '%${searchKeyword}%'
						</when>
						<when test="searchType.equals('star')">
							rev_star LIKE '%${searchKeyword}%'
						</when>
						<when test="searchType.equals('carModel')">
							car_model LIKE '%${searchKeyword}%'
						</when>
					</choose>
				</if>
	</select>
	
	
	<!-- 예약 조회 - SELECT -->
	<select id="selectBoard" resultType="int">
		select count(*) 
		from 
			res_info ri join mem_info mi 
			on ri.mem_idx = mi.mem_idx 
		where 
			mi.mem_id = #{sId} 
	</select>
	
	<!-- 리뷰 게시판 - 멤버의 이름으로 검색하여
	 최신 예약건과 차량이름, 모델, 년도 들고오기 -->
	<select id="selectResNCarInfo" resultType="map">
		select res_idx , car_model, car_company , car_old
		from 
			res_info ri join car_info ci
			on ri.car_idx = ci.car_idx
		where 
			<if test="sId != null">
				mem_idx = 
				(
					select mem_idx
					from mem_info
					where
						mem_id = #{sId}
				)
				AND 
			</if>
			res_idx = #{resIdx}
		LIMIT 0,1
	</select>	
	
	<!-- 리뷰 게시판 - 현재 리뷰를 작성할 예약 번호로
		리뷰가 이미 작성이 되어 있는지 확인하기 -->
	<select id="selectIsAlreadyWriteRev" resultType="int">
		SELECT count(*) 
		FROM rev_car rc 
		WHERE 
			res_idx = #{resIdx}
	</select>
		
	
	<!-- 리뷰 게시판 뷰 -->
	<select id="reviewDetail" resultType="com.itwillbs.project_gabolcar.vo.ReviewVO">
		SELECT rc.rev_date, rc.rev_idx, rc.rev_star, mi.mem_id, rc.rev_subject, rc.rev_name, ci.car_model, 
		rc.rev_content, date_format(rev_date, '%Y-%m-%d')AS rev_date_format, rc.rev_file1, rc.rev_file2, rc.rev_file3 
       		FROM rev_car rc
	       		JOIN res_info ri
	       		ON rc.res_idx = ri.res_idx 
	       		JOIN car_info ci
	       		ON ri.car_idx = ci.car_idx 
	       		left join mem_info mi
	              	on rc.rev_name = mi.mem_name
					WHERE rev_idx = #{rev_idx}
	</select>
	
	<delete id="deleteReview">
		DELETE
			FROM rev_car
				WHERE rev_idx = #{rev_idx}
	</delete>
	
	<insert id="insertReview">
		INSERT
			INTO rev_car
			VALUES (
				null,
				#{res_idx},
				(select mem_name from mem_info where mem_id = #{session_id}),
				#{rev_subject},
				#{rev_content},
				#{rev_star},
				now(),
				#{rev_file1},
				#{rev_file2},
				#{rev_file3}
			)
	</insert>
	
	<update id="modifyReview">
		UPDATE rev_car
			SET rev_subject = #{rev_subject},
				rev_content = #{rev_content},
				rev_star = #{rev_star} 
					WHERE rev_idx = #{rev_idx}
	</update>
		
	<update id="updateIdx">
		UPDATE rev_car
			SET rev_idx = rev_idx - 1
			WHERE rev_idx > #{rev_idx}
	</update>
	
	
	<!-- 리뷰 게시판 끝 -->
	
	
	
	
	
	<!-- 차량 idx 에 해당하는 옵션들 불러오기 -->
	<select id="selectCarOptions" resultType="map">
		SELECT * FROM option_list ol 
		WHERE 
		option_idx in
		(
			SELECT option_idx 
			FROM car_options co 
			WHERE car_idx = #{car_idx}
		)
	</select>	
	
	
	<!-- 차량 소개 - 차량 정보 -->
	<select id="selectCarInfoList" resultType="map">
		select 
			ci.car_idx
			, car_type
			, car_company
			, car_model
			, car_old
		 	, car_shift_type
		 	, car_fuel_type
		 	, car_riding
			, brc_name
			, car_status
		 	, car_riding
		 	, car_weekend
		 	, car_weekdays
			, group_concat(option_name SEPARATOR ', ') AS option_name
		from 
			car_info ci 
			JOIN car_options co ON ci.car_idx = co.car_idx
			JOIN option_list ol ON co.option_idx = ol.option_idx
		<choose>
			<when test="car_type != null and car_fuel != null">
				where car_type in (
				<foreach collection="car_type" item="type" separator=",">
				#{type}
				</foreach>
				) and car_fuel_type in (
				<foreach collection="car_fuel" item="fuel" separator="," >
				#{fuel}
				</foreach>
				)
			</when>
			<when test="car_type != null and car_fuel == null">
				where car_type in (
				<foreach collection="car_type" item="type" separator=",">
				#{type}
				</foreach>
				)
			</when>
			<when test="car_fuel != null and car_type == null">
				where car_fuel_type in (
				<foreach collection="car_fuel" item="car_fuel" separator="," >
				#{car_fuel}
				</foreach>
				)
			</when>
		</choose>
		GROUP BY
			ci.car_idx
		<if test="startRow != null and listLimit != null">
		limit
			#{startRow}
			, #{listLimit}
		</if>
		
		
	</select>
	
	<!-- 차량 소개 - 각 차량에 등록된 옵션 -->
	<select id="selectCarOptionListInfo" parameterType="int" resultType="map">
	    SELECT ol.* FROM option_list ol
	    	INNER JOIN car_options co ON ol.option_idx = co.option_idx
	    	WHERE co.car_idx = #{carIdx}
	</select>
	
	
	
	<!-- ==== 0626 경인수정 main 페이지 리뷰 띄울항목 검색 -->
	<select id="getReviewListMain" resultType="map">
		SELECT rev_idx, res_idx, rev_star ,rev_subject, rev_date ,car_model, car_company
		FROM 
			(
				SELECT rc.rev_idx, rc.res_idx, rev_subject , car_idx, rev_star ,rev_date  
				FROM 
				rev_car rc JOIN res_info ri ON rc.res_idx = ri.res_idx
			) 
			rev_res 
			JOIN car_info ci ON ci.car_idx = rev_res.car_idx
		WHERE 
			rev_star >= 4
		ORDER BY rev_date DESC 
		LIMIT 0, 4
	</select>
</mapper>
